// <auto-generated />
using System;
using DoctorAppointment.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoctorAppointment.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoctorAppointment.Models.Appointment", b =>
                {
                    b.Property<int>("AId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Did")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Fromtime")
                        .HasColumnType("time");

                    b.Property<double>("GST")
                        .HasColumnType("float");

                    b.Property<string>("Pname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ServiceCharge")
                        .HasColumnType("float");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int>("TotalCharge")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Totime")
                        .HasColumnType("time");

                    b.HasKey("AId");

                    b.HasIndex("Did");

                    b.ToTable("appointments");
                });

            modelBuilder.Entity("DoctorAppointment.Models.DoctorMaster", b =>
                {
                    b.Property<int>("Did")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Did"));

                    b.Property<DateOnly>("AvailableDate")
                        .HasColumnType("date");

                    b.Property<string>("ChargeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<double>("SRate")
                        .HasColumnType("float");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("time");

                    b.HasKey("Did");

                    b.ToTable("doctorMasters");

                    b.HasData(
                        new
                        {
                            Did = 1,
                            AvailableDate = new DateOnly(2025, 1, 10),
                            ChargeType = "Hourly",
                            FromTime = new TimeSpan(0, 5, 0, 0, 0),
                            Name = "Mr Patel",
                            Rate = 200.0,
                            SRate = 400.0,
                            ToTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Did = 2,
                            AvailableDate = new DateOnly(2025, 1, 10),
                            ChargeType = "Fix",
                            FromTime = new TimeSpan(0, 10, 0, 0, 0),
                            Name = "Mr Shah",
                            Rate = 500.0,
                            SRate = 100.0,
                            ToTime = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            Did = 3,
                            AvailableDate = new DateOnly(2025, 1, 10),
                            ChargeType = "Hourly",
                            FromTime = new TimeSpan(0, 10, 0, 0, 0),
                            Name = "Mr Sharma",
                            Rate = 300.0,
                            SRate = 300.0,
                            ToTime = new TimeSpan(0, 15, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("DoctorAppointment.Models.Appointment", b =>
                {
                    b.HasOne("DoctorAppointment.Models.DoctorMaster", "DoctorMaster")
                        .WithMany()
                        .HasForeignKey("Did")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorMaster");
                });
#pragma warning restore 612, 618
        }
    }
}
